{"cells":[{"cell_type":"markdown","metadata":{"id":"Q4cgStaovcG0"},"source":["# Рекомендация тарифов"]},{"cell_type":"markdown","metadata":{"id":"eArZPfOavcG1"},"source":["В вашем распоряжении данные о поведении клиентов, которые уже перешли на эти тарифы (из проекта курса «Статистический анализ данных»). Нужно построить модель для задачи классификации, которая выберет подходящий тариф. Предобработка данных не понадобится — вы её уже сделали.\n","\n","Постройте модель с максимально большим значением *accuracy*. Чтобы сдать проект успешно, нужно довести долю правильных ответов по крайней мере до 0.75. Проверьте *accuracy* на тестовой выборке самостоятельно."]},{"cell_type":"markdown","metadata":{"id":"h53dUCEsvcG2"},"source":["## Откройте и изучите файл"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"A_x7e5kDvcG3"},"outputs":[],"source":["import pandas as pd\n","# для замера времени обучения моделей.\n","import time\n","import operator\n","# прогресс-бар.\n","from tqdm import trange\n","# для стандартизации данных по подбора ГП.\n","from sklearn.preprocessing import MinMaxScaler\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.model_selection import RandomizedSearchCV\n","# для сравнения моделей.\n","from sklearn.metrics import confusion_matrix\n","from sklearn.metrics import classification_report\n","# модуль для разделения выборки.\n","from sklearn.model_selection import train_test_split\n","# модуль для получения структуры данных для классификации деревом решений.\n","from sklearn.tree import DecisionTreeClassifier, plot_tree\n","# модуль метрик качества.\n","from sklearn.metrics import accuracy_score\n","# модуль для работы со структурой данных \"Случайный лес\".\n","from sklearn.ensemble import RandomForestClassifier\n","# инициализация модели логистической регрессии.\n","from sklearn.linear_model import LogisticRegression\n","# инициализация модели простого классификатора.\n","from sklearn.dummy import DummyClassifier\n","# для построения графиков.\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","import seaborn as sns\n","sns.set()\n","from IPython.display import display"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8lwwGpMAvcG7"},"outputs":[],"source":["# прочитаем файл данных.\n","try:\n","    # data = pd.read_csv('/datasets/data.csv')\n","    df=pd.read_csv('datasets/users_behavior.csv')\n","except:\n","    df = pd.read_csv('https://code.s3.yandex.net/datasets/users_behavior.csv')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EcJVtpRQvcG8"},"outputs":[],"source":["# посмотрим на тип данных и характеристики датасета.\n","display (df.describe())\n","df. head()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xTBU45bDvcG9"},"outputs":[],"source":["df. info()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lk5OW-fOvcG-"},"outputs":[],"source":["# изменим тип данных 'calls' и 'messages' на 'int'.\n","convert_dict = {'calls': int,\n","                'messages': int}\n","df = df.astype(convert_dict)\n","print(df.dtypes)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IJu_8zWnvcG_"},"outputs":[],"source":["# посмотрим на распределение классов в данных.\n","df. is_ultra.value_counts().plot(kind='bar')\n","plt. title(\"Распределение биномиальных значений в серии 'is_ultra'\")\n","plt. show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rpNWJUKDvcG_"},"outputs":[],"source":["# построим матрицу корреляции.\n","sns.heatmap(df.corr(),annot=True,vmin=-1, vmax=1, center= 0)\n","plt.title(\"Матрица корреляции\", loc=\"left\")\n","plt. show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xFQfVWhsvcG_"},"outputs":[],"source":["# построим график для визуализации взаимосвязи сразу нескольких количественных переменных.\n","# установим параметром hue данные из серии 'is_ultra'，чтобы увидеть распределение каждого тарифа по имеющимся признакам.\n","print(\"Графики для выявления взаимосвязи между параметрами\")\n","sns.pairplot(df, hue=\"is_ultra\")\n","plt. show()"]},{"cell_type":"markdown","metadata":{"id":"cdvgeoLIvcHA"},"source":["### Вывод\n","\n","    На данном этапе мы импортировали необходимые библиотеки для дальнейшей работы и ознакомились с датасетом по рекомендации тарифов.В нём были изменены серии 'calls' и 'messages' с типом данных 'float' на 'int'. Остальные этапы по предобработке данных были проделаны в прошлой работе, поэтому существенных изменений проводить не нужно.\n","    Так же был проведён анализ распределения классовых данных, из которых будут создаваться целевые выборки для обучения и тестирования моделей. Как видно из графика выше класс 0 превышает количество данных с классом 1 и это говорит о несбалансированности классов, которые превалируют в реальной практике, в таких случаях часто приходится прибегать к техникам искусственной модификации датасета для выравнивания соотношения классов, но в нашей работе такая задача не ставилась. Проанализировав график количественной взаимосвязи переменных и матрицу корреляции,можно сказать о высокой корреляции между ' calls' и 'minutes',а так же о наличии положительной скошенности графика с тарифом '1' по сравнению с тарифом '0'.Явного влияния признаков на целевой параметр не видно.\n","    Перейдем к этапу разделения датасета на выборки."]},{"cell_type":"markdown","metadata":{"id":"EcLfHl9bvcHB"},"source":["## Разбейте данные на выборки"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"y0K6EFy6vcHB"},"outputs":[],"source":["# разделим датасет на выборки в соотношении 3:1:1\n","# по умолчанию параметр shuffle всегда True.\n","# Значит при создании выборки данные перемешиваются между собой для лучшего обучения модели.\n","df_train, df_other=train_test_split(df,test_size=0.25, random_state=12345,shuffle=True)\n","df_valid, df_test=train_test_split(df_other,test_size=0.5, random_state=12345,shuffle=True)\n","df_train_with_valid=pd.concat([df_train,df_valid],ignore_index=True, axis=0)\n","print('Size of Train Sample:', df_train.shape[0])\n","print('Size of Valid Sample:', df_valid.shape[0])\n","print('Size of Test Sample:', df_test.shape[0])\n","print()\n","print('Size of Sample for final training:', df_train_with_valid.shape[0])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lc5V1moZvcHC"},"outputs":[],"source":["# создадим выборки для обучения модели: признаки/предикаты -\n","# features и целевую выборку - targets.\n","features = df_train.drop('is_ultra', axis=1)\n","target = df_train['is_ultra']\n","\n","# выборка валидационная\n","features_valid = df_valid.drop('is_ultra', axis=1)\n","target_valid = df_valid['is_ultra']\n","\n","# выборка для проведения теста модели\n","features_test = df_test.drop('is_ultra', axis=1)\n","target_test = df_test['is_ultra']"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3D4leITgvcHC"},"outputs":[],"source":["# суммарная выборка для дообучения модели Дерева решений.\n","features_final= df_train_with_valid.drop('is_ultra', axis=1)\n","target_final= df_train_with_valid['is_ultra']"]},{"cell_type":"markdown","metadata":{"id":"Hpk6hFMzvcHC"},"source":["### Вывод\n","\n","Мы разделили датасет на следующие выборки: для обучения, для валидации и для тестирования в соотношении 3:1:1. Так же для дообучения модели Дерева решений была создана выборка путём объединения тренировочной и валидационной выборки, чтобы улучшить прогноз по сравнению со Случайным лесом. Далее в каждой выборке были выделены признаки и целевые показатели."]},{"cell_type":"markdown","metadata":{"id":"RGM0ysK1vcHE"},"source":["## Исследуйте модели"]},{"cell_type":"markdown","metadata":{"id":"ubJXeE_kvcHE"},"source":["Построим три основных модели по работе с классификационными данными: дерево решения, случайный лес и логистическая регрессия."]},{"cell_type":"markdown","metadata":{"id":"EqP-4AbqvcHE"},"source":["Дерево решений"]},{"cell_type":"code","execution_count":null,"metadata":{"scrolled":true,"id":"yvQJXk9IvcHE"},"outputs":[],"source":["# создадим словари, куда будут\n","#поступать ключи/глубина дерева и соответствующий ей показатель accuracy.\n","valid_depth={}\n","train_depth={}\n","# используем trange из библиотеки tqdm для визуализации прогрессбара.\n","# создадим цикл для перебора depth.\n","for depth in trange(1,51):\n","    model_tree = DecisionTreeClassifier(random_state=12345, max_depth=depth)\n","    model_tree.fit(features, target)\n","    predictions = model_tree.predict(features_valid)\n","    accuracy = round(accuracy_score(target_valid, predictions),4)\n","    accuracy_train_sample = round(model_tree.score(features, target),4)\n","    valid_depth[depth] = accuracy\n","    train_depth[depth] = accuracy_train_sample\n","# создадим переменные для максимальных значений depth по\n","# максимальному значению accuracy используя метод itemgetter из библиотеки operator.\n","train_max_depth=max(train_depth.items(),key=operator.itemgetter(1))[0]\n","valid_max_depth=max(valid_depth.items(),key=operator.itemgetter(1))[0]\n","\n","\n","print('Maximum accuracy for Validation Sample:',\n","valid_depth [valid_max_depth],\n","'with depth:',valid_max_depth,\n","'Maximum accuracy for Training Sample:',\n","train_depth [train_max_depth],\n","'with depth:',train_max_depth,sep='\\n')\n","\n","pd.Series(valid_depth).plot(kind='line',ylim=(.7,.85),figsize=(18,5),color='red')\n","pd.Series(train_depth).plot(kind='line',ylim=(.7,.99),figsize=(18,5), color='green')\n","plt.xticks(rotation=65, horizontalalignment='right')\n","plt. title ('Распределение показателей depth,accuracy на выборках train,valid', fontsize=30,fontweight='bold')\n","plt.ylabel('Accuracy')\n","plt.xlabel('Depth')\n","plt.gca().legend(('Validation sample','Training sample'))\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rjxudWd4vcHF"},"outputs":[],"source":["# обучим модель Дерево решений на подобранном ранее гиперпараметре max_depth по валидационной выборке.\n","model_tree = DecisionTreeClassifier(random_state=12345, max_depth=valid_max_depth)\n","# создадим переменную для отсчета стартового времени обучения\n","# с помощью метода monotonic (для точного представления измеряемого количества\n","# времени, вне зависимости от работы ОС и текущей платформы в отличие от метода time).\n","time_start = time. monotonic()\n","# используем для обучения увеличенную выборку.\n","model_tree.fit(features_final, target_final)\n","plot_tree(model_tree, filled=True)\n","plt.title(\"Дерево решений\", loc=\"left\")\n","plt.show()\n","# словарь для замера времени обучения.\n","time_spent={}\n","time_spent['DTC']=round((time.monotonic() - time_start),2)"]},{"cell_type":"markdown","metadata":{"id":"qU2WIk5PvcHG"},"source":["### Вывод\n","\n","Согласно графика выше глубина решающего дерева не должна быть больше значения 'valid_max_depth',иначе модель будет переобучена и её качество снизится. При данном гиперпараметре уровень accuracy составляет 0.79."]},{"cell_type":"markdown","metadata":{"id":"ewU0aFs1vcHG"},"source":["Случайный лес"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"udfg5ebHvcHG"},"outputs":[],"source":["# создадим словари, куда будут\n","#поступать ключи/количество деревьев и соответствующий им показатель accuracy.\n","valid_estim,train_estim = {}, {}\n","# используем trange из библиотеки tqdm для визуализации прогрессбара.\n","# создадим цикл для перебора n_estimators.\n","for estim in trange(1,51):\n","    model_forest = RandomForestClassifier(random_state=12345,n_estimators=estim)\n","    model_forest.fit(features, target)\n","    score = round(model_forest.score(features_valid, target_valid),4)\n","    valid_estim[estim] = score\n","    score = round(model_forest.score(features, target),4)\n","    train_estim[estim] = score\n","# создадим переменные для максимальных значений n-estimators по\n","# максимальному значению accuracy используя метод itemgetter из библиотеки operator.\n","train_max_estim=max(train_estim.items(),key=operator.itemgetter(1))[0]\n","valid_max_estim=max(valid_estim.items(),key=operator.itemgetter(1))[0]\n","\n","print('Maximum accuracy for Validation Sample:',\n","valid_estim [valid_max_estim],\n","'with estim:',valid_max_estim,\n","'Maximum accuracy for Training Sample:',\n","train_estim [train_max_estim],\n","'with estim:',train_max_estim,sep='\\n')\n","\n","# построим график.\n","pd.Series(train_estim).plot.line(ylim=(.7,.99),figsize=(18,5), color='green')\n","pd.Series(valid_estim).plot.line(ylim=(.7,.99), figsize=(18,5),color='red')\n","plt. title ('Распределение показателей estimator,accuracy на выборках train,valid', fontsize=30,fontweight='bold')\n","plt.ylabel('Accuracy')\n","plt.xlabel('Estimator')\n","plt.gca().legend(('Training sample','Validation sample'))\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wA-A7Ed7vcHH"},"outputs":[],"source":["# теперь осуществим подбор гиперпараметра depth по известной нам n_estimators.\n","valid_depth, train_depth= {}, {}\n","for depth in trange (1,51):\n","    model_forest = RandomForestClassifier(random_state=12345,n_estimators=valid_max_estim, max_depth=depth)\n","    model_forest.fit(features, target)\n","    score = round(model_forest.score(features_valid, target_valid),4)\n","    valid_depth[depth] = score\n","    score = round(model_forest.score(features, target),4)\n","    train_depth[depth] = score\n","\n","train_max_depth=max(train_depth.items(),key=operator.itemgetter(1))[0]\n","valid_max_depth=max(valid_depth.items(),key=operator.itemgetter(1))[0]\n","\n","\n","print('Maximum accuracy for Valid Sample:',\n","valid_depth [valid_max_depth],\n","'with depth:',valid_max_depth,\n","'with estim:', valid_max_estim,\n","'Maximum accuracy for Train Sample:',\n","train_depth [train_max_depth],\n","'with depth:',train_max_depth,\n","'with estim:',train_max_estim,sep='\\n')\n","\n","# построим график для наглядности.\n","pd.Series(train_depth).plot.line(ylim=(.7,.99),figsize=(18,5), color='green')\n","pd.Series(valid_depth).plot.line(ylim=(.7,.99), figsize=(18,5),color='red')\n","plt. title ('Распределение показателей depth,accuracy на выборках train,valid', fontsize=30,fontweight='bold')\n","plt.ylabel('Accuracy')\n","plt.xlabel('Depth')\n","plt.gca().legend(('Train sample','Valid sample'))\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"Oo9DGPgQvcHH"},"source":["Для поиска наиболее эффективных гиперпараметров для RandomForestClassifier  воспользуемся GridSearchCV и RandomizedSearchCV из библиотеки sklearn.\n","\n","GridSearch— поиск лучших параметров в фиксированной сетке возможных значений.\n","CV – перекрёстная проверка (кросс-валидация, Cross-validation), метод, который показывает, что модель не переобучилась.\n","В отличие от GridSearchCV в RandomizedSearchCV,не все значения параметров опробованы,а из заданных распределений выбирается фиксированное количество параметров.Количество опробованных настроек параметров задается значением n_iter."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"G54KDB1avcHO"},"outputs":[],"source":["# посмотрим на имеющиеся гиперпараметры модели.\n","model_forest.get_params()"]},{"cell_type":"code","execution_count":null,"metadata":{"scrolled":false,"id":"W83KZNBNvcHO"},"outputs":[],"source":["# создадим словарь, где укажем параметры, по которым\n","# будет осуществляться прогон для поиска наилучших сочетаний.\n","param = {\n","    'criterion': ['gini','entropy'],\n","    'max_depth': range(1,15,3),\n","    'n_estimators': range(1,20,3),\n","    'max_features': ['auto', 'sqrt', 'log2',  None],}\n","rf = RandomForestClassifier(random_state=12345)\n","\n","# Пропишем параметры для GridSearchCV: estimator -модель, которую мы хотим обучить,\n","# param_grid - словарь с основными параметрами модели выше, которые мы хотим подобрать.\n","# cv - сколько разрезов кросс-валидации мы ходим сделать,\n","# n_jobs -количество паралельных процессов. Значение '-1' - задействованы все.\n","# verbose - насколько детальный отчёт мы хотим видеть.\n","# scoring — выбор метрики ошибки, в нашем случае accuracy.\n","grid_search = GridSearchCV(estimator = rf, param_grid = param,\n","                          cv = 5, n_jobs = -1, verbose = 1,scoring='accuracy')\n","grid_search.fit(features,target)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"izRX8qgPvcHP"},"outputs":[],"source":["# посмотрим, какие наилучшие гиперпараметры для нашей модели.\n","print('Best parameters for RandomForestClassifier:')\n","display(grid_search.best_params_)\n","print('Accuracy training sample', 'with GridSearchCV for RFC:',round(grid_search.score(features,target),4),sep='\\n')\n","print('Accuracy validation sample', 'with GridSearchCV for RFC:',round(grid_search.score(features_valid,target_valid),4),sep='\\n')\n","new_param=grid_search.best_params_"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Ry-5iZ72vcHQ"},"outputs":[],"source":["# с помощью библиотеки RandomizedSearchCV подберем гиперпараметры\n","# по такому же словарю 'param', который использовали с GridSearchCV. Посмотрим, кто справится лучше.\n","random_search =RandomizedSearchCV(rf,param, n_iter=5, cv=5, n_jobs=-1, verbose=1,scoring='accuracy')\n","random_search.fit(features,target)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dU8D0t1AvcHQ"},"outputs":[],"source":["# посмотрим, какие наилучшие гиперпараметры для нашей модели.\n","print('Best parameters for RandomForestClassifier:')\n","display(random_search.best_params_)\n","print('Accuracy training sample', 'with RandomizedSearchCV for RFC:',round(random_search.score(features,target),4),sep='\\n')\n","print('Accuracy validation sample', 'with RandomizedSearchCV for RFC:',round(random_search.score(features_valid,target_valid),4),sep='\\n')\n","random_param=random_search.best_params_"]},{"cell_type":"markdown","metadata":{"id":"5UY7C-0DvcHQ"},"source":["### Вывод\n","\n","Мы построили модель Случайный лес с подбором гиперпараметров 2 способами:\n","\n","1.Подбор глубины и количества деревьев через 2 последовательных цикла. Был получен показатель accuracy на валидационной выборке равный 0.8.\n","\n","2.Подбор гиперпараметров помимо глубины и количества деревьев ещё и количество признаков, которые следует учитывать при поиске лучшего сплита ('max_features'), а так же функции разделения ('criterion') с помощью библиотек GridSearchCV и RandomizedSearchCV, что дало такой результат accuracy - 0.8 на валидационной выборке, но с другими гиперпараметрами.\n","\n","Сравним 3 модели по получившемся 2мя способами подбора гиперпараметров на тестовой выборке."]},{"cell_type":"markdown","metadata":{"id":"DUJML7IHvcHR"},"source":["Логическая регрессия"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2xtSFMYevcHR"},"outputs":[],"source":["# Логическая регрессия без нормализации данных.\n","model_lp = LogisticRegression(random_state=12345)\n","model_lp.fit(features, target)\n","score = model_lp.score(features_valid, target_valid)\n","score_train = model_lp.score(features, target)\n","\n","print('Accuracy of logistic regression classifier on train set: {:.4f}'.format(score_train))\n","print('Accuracy of logistic regression classifier on validation set: {:.4f}'.format(score))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QuVLbbR_vcHS"},"outputs":[],"source":["# Логическая регрессия с нормализацией данных при помощи MinMaxscaler().\n","logreg = LogisticRegression(random_state=12345)\n","scaler=MinMaxScaler(feature_range = (0,1))\n","log_f=scaler.fit_transform(features)\n","log_val=scaler.transform(features_valid)\n","log_test=scaler.transform(features_test)\n","logreg.fit(log_f, target)\n","time_spent['LR']=round((time.monotonic() - time_start),2)\n","print('Accuracy of logistic regression classifier on train set: {:.4f}'.\n","      format(logreg.score(log_f, target)))\n","print('Accuracy of logistic regression classifier on validation set: {:.4f}'.\n","      format(logreg.score(log_val, target_valid)))"]},{"cell_type":"markdown","metadata":{"id":"LNP3nl76vcHS"},"source":["### Вывод\n","\n","Модель  LogisticRegression дает лучший показатель accuracy равный 0.77 при нормализации данных с помощью MinMaxScaler. При проверке на тестовой выборке будем использовать именно эту модель."]},{"cell_type":"markdown","metadata":{"id":"12Bgh83QvcHT"},"source":["## Проверьте модель на тестовой выборке"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TmXAcaBovcHT"},"outputs":[],"source":["# обучим модель Случайного леса на гиперпараметрах, полученных с помощью GridSearchCV.\n","model_forest_gs= RandomForestClassifier(random_state=12345,\n","criterion=new_param['criterion'],\n","n_estimators=new_param['n_estimators'],\n","max_depth=new_param['max_depth'],\n","max_features = new_param['max_features'])\n","model_forest_gs.fit(features, target)\n","time_spent['RF_GS']=round((time.monotonic() - time_start),2)\n","\n","\n","# обучим модель Случайного леса на гиперпараметрах, полученных с помощью RandomizedSearchCV.\n","model_forest_random= RandomForestClassifier(random_state=12345,\n","criterion=random_param['criterion'],\n","n_estimators=random_param['n_estimators'],\n","max_depth=random_param['max_depth'],\n","max_features = random_param['max_features'])\n","model_forest_random.fit(features, target)\n","time_spent['RF_RS']=round((time.monotonic() - time_start),2)\n","\n","\n","# обучим модель Случайного леса на параметрах, полученных подбором через цикл.\n","model_forest= RandomForestClassifier(random_state=12345,\n","n_estimators=valid_max_estim,\n","max_depth=valid_max_depth)\n","model_forest.fit(features, target)\n","time_spent['RF']=round((time.monotonic() - time_start),2)\n","\n","\n","# сохраним предсказания на тестовой выборке по каждой модели для дальнейшего анализа.\n","predict_forest_gs= model_forest_gs.predict(features_test)\n","predict_forest_random= model_forest_random.predict(features_test)\n","predict_forest= model_forest.predict(features_test)\n","predict_logreg= logreg.predict(log_test)\n","predict_tree= model_tree.predict(features_test)\n","\n","\n","# сохраним результаты в датафрейм и построим график.\n","all_models=pd.DataFrame({'DTC': [round(model_tree.score(features_test, target_test),4)],\n","'LR': [round(logreg.score(log_test, target_test),4)],\n","'RF-GS': [round(model_forest_gs.score(features_test, target_test),4)],\n","'RF-RS': [round(model_forest_random.score(features_test, target_test),4)],\n","'RF': [round(model_forest.score(features_test, target_test),4)], 'Limit' :[0.75]}, index=['accuracy'])\n","g=sns.barplot(data=all_models,color='black')\n","g.set_title('Показатель Accuracy по моделям в сравнении с лимитом=0.75',fontdict={'fontsize':20})\n","g.set_ylim(bottom=0.6, top=0.9)\n","g.set(xlabel='ML models', ylabel='Accuracy meaning')\n","plt. show()\n","all_models"]},{"cell_type":"markdown","metadata":{"id":"wNltUDyYvcHU"},"source":["Посмотрим на скорость обучения моделей."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fApZPi7TvcHU"},"outputs":[],"source":["time_train=pd.DataFrame(time_spent, index=['time'])\n","w=sns.barplot(data=time_train,color='blue')\n","w.set_title('Показатель затраченного времени на обучение в разбивке по моделям',fontdict={'fontsize':20})\n","w.set_ylim(bottom=10, top=70)\n","w.set(xlabel='ML models', ylabel='Time')\n","plt. show()\n","time_train"]},{"cell_type":"markdown","metadata":{"id":"c67OruJBvcHV"},"source":["Построим матрицы неточностей, показывающие точность прогнозирования классификатора в отношении имеющихся двух классов и классификационные отчёты для сравнения успешного обучения моделей."]},{"cell_type":"markdown","metadata":{"id":"nf5UknoYvcHV"},"source":["Случайный лес"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"R4MczDCyvcHW"},"outputs":[],"source":["# построим матрицу неточностей и классификационный отчёт.\n","confusion = confusion_matrix(target_test, predict_forest)\n","print(\"Confusion matrix:\\n{}\".format(confusion))\n","print(classification_report(predict_forest, target_test))"]},{"cell_type":"markdown","metadata":{"id":"HInD-glbvcHW"},"source":["Случайный лес (RandomizedSearchCV)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"egdLZdbLvcHW"},"outputs":[],"source":["confusion = confusion_matrix(target_test, predict_forest_random)\n","print(\"Confusion matrix:\\n{}\".format(confusion))\n","print(classification_report(predict_forest_random, target_test))"]},{"cell_type":"markdown","metadata":{"id":"y_A5y2PtvcHX"},"source":["Случайный лес (GridSearchCV)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YcMZr5UivcHX"},"outputs":[],"source":["confusion = confusion_matrix(target_test, predict_forest_gs)\n","print(\"Confusion matrix:\\n{}\".format(confusion))\n","print(classification_report(predict_forest_gs, target_test))"]},{"cell_type":"markdown","metadata":{"id":"ApgeEN3OvcHX"},"source":["Логическая регрессия"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CsMVmHxrvcHY"},"outputs":[],"source":["confusion = confusion_matrix(target_test, predict_logreg)\n","print(\"Confusion matrix:\\n{}\".format(confusion))\n","print(classification_report(predict_logreg, target_test))"]},{"cell_type":"markdown","metadata":{"id":"op-f4NKivcHY"},"source":["Дерево решений"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8AFJJ01OvcHY"},"outputs":[],"source":["confusion = confusion_matrix(target_test, predict_tree)\n","print(\"Confusion matrix:\\n{}\".format(confusion))\n","print(classification_report(predict_tree, target_test))"]},{"cell_type":"markdown","metadata":{"id":"LyYbqzwRvcHZ"},"source":["### Вывод\n","\n","    Вывод:\n","\n","    Было обучено 3 модели машинного обучения на основе библиотеки sklearn:\n","\n","    - Логическая регрессия (LogisticRegression)\n","    - Случайный лес (RandomForestClassifier)\n","    - Дерево решений (DecisionTreeClassifier)\n","\n","    В рамках данного проекта было решено не только найти наиболее эффективную модель по показателю accuracy, но и 'поиграть с тюнингом' этих моделей.\n","\n","    На модели Дерева решений было проведено обучение на увеличенной тренировочной выборке за счёт объединения с валидационной. Данное решение было применено для увеличения точности прогноза, т. к. данная модель обучается быстрее остальных.\n","\n","    На модели Случайного леса были проведены подборы гиперпараметров с помощью цикла (количество деревьев и глубина) и подбор расширенного списка гиперпараметров с помощью GridSearchCV и RandomizedSearchCV.\n","\n","    На Логической регрессии посмотрели, как себя ведëт модель с предварительной нормализацией и стандартизацией данных с использованием MinMaxScaler и без. Модель с обработкой данных показала лучший accuracy на валидационной выборке и в дальнейшем именно она проверялась на тестовой выборке.\n","\n","    На тестовой проверке моделей мы убедились, что модель Случайного леса после подбора ГП RandomizedSearchCV показывает себя лучшим образом среди остальных моделей машинного обучения, но и такие модели как Случайный лес, Случайный лес с подбором GridSearchCV, Дерево решений перешагнули пороговое значение accuracy 0.75 ('Limit') в рамках нашего задания. Логическая регрессия не добрала сотых долей до порога.\n","\n","    Решение с созданием выборки для дообучения Дерева решений улучшило точность данной модели.Надо отметить,что данная модель  обучается быстрее остальных моделей.\n","\n","    Так как в целевых данных классы сильно разбалансированы, то показатель accuracy может ввести в заблуждение. Решено было так же проанализировать матрицы неточностей и классификационные отчеты в части показателей macro avg и average avg по показателю f1-score (у нас нет предпочтений по классам) и по нему мы так же убедились в успешном обучении модели Случайного леса после RandomizedSearchCV."]},{"cell_type":"markdown","metadata":{"id":"nidtavRcvcHa"},"source":["## (бонус) Проверьте модели на адекватность"]},{"cell_type":"markdown","metadata":{"id":"HBaL6L2qvcHb"},"source":["Для проверки модели создадим baseline модель DummyClassifier для определения минимально ожидаемой производительности по поставленной задаче."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XTXgbC54vcHb"},"outputs":[],"source":["model_dc = DummyClassifier(strategy='most_frequent', random_state=12345)\n","model_dc.fit(features, target)\n","result_dc = model_dc.score(features_test, target_test)\n","print('Accuracy DummyClassifier:', round(result_dc,4))"]},{"cell_type":"markdown","metadata":{"id":"mcxFrC4nvcHb"},"source":["### Вывод\n","\n","Baseline модель DummyClassifier показала, что минимальный порог адекватного accuracy составляет 0.704.У данной модели машинного обучения нет никакого представления о данных и она классифицирует данные, используя только простые правила. Поведение данного классификатора полностью не зависит от обучающих данных, поскольку тенденции в обучающих данных полностью игнорируются и вместо этого используется одна из стратегий для прогнозирования метки класса. Следовательно все модели построенные выше проходят более сложный алгоритм обучения на данных и то, что accuracy каждой из них выше 0.704 свидетельствует об их адекватности.\n","\n"]}],"metadata":{"ExecuteTimeLog":[{"duration":1546,"start_time":"2023-01-21T04:47:20.669Z"},{"duration":112,"start_time":"2023-01-21T04:47:22.217Z"},{"duration":25,"start_time":"2023-01-21T04:47:22.330Z"},{"duration":9,"start_time":"2023-01-21T04:47:22.357Z"},{"duration":5,"start_time":"2023-01-21T04:52:37.474Z"},{"duration":74,"start_time":"2023-01-21T04:52:37.481Z"},{"duration":17,"start_time":"2023-01-21T04:52:37.557Z"},{"duration":6,"start_time":"2023-01-21T04:52:37.576Z"},{"duration":8,"start_time":"2023-01-21T04:52:37.583Z"},{"duration":5,"start_time":"2023-01-21T04:52:37.592Z"},{"duration":1603,"start_time":"2023-01-21T04:54:39.895Z"},{"duration":1713,"start_time":"2023-01-21T04:55:48.333Z"},{"duration":7443,"start_time":"2023-01-21T04:59:00.960Z"},{"duration":2148,"start_time":"2023-01-21T05:00:40.414Z"},{"duration":5,"start_time":"2023-01-21T05:00:46.468Z"},{"duration":99,"start_time":"2023-01-21T05:00:46.475Z"},{"duration":17,"start_time":"2023-01-21T05:00:46.575Z"},{"duration":6,"start_time":"2023-01-21T05:00:46.593Z"},{"duration":11,"start_time":"2023-01-21T05:00:46.600Z"},{"duration":11,"start_time":"2023-01-21T05:00:46.612Z"},{"duration":1641,"start_time":"2023-01-21T05:00:46.625Z"},{"duration":8287,"start_time":"2023-01-21T05:00:48.267Z"},{"duration":2206,"start_time":"2023-01-21T05:00:56.556Z"},{"duration":39797,"start_time":"2023-01-21T05:02:38.392Z"},{"duration":17,"start_time":"2023-01-21T05:03:40.393Z"},{"duration":108,"start_time":"2023-01-21T05:04:31.965Z"},{"duration":116,"start_time":"2023-01-21T05:05:06.948Z"},{"duration":192,"start_time":"2023-01-21T05:06:22.860Z"},{"duration":328,"start_time":"2023-01-21T05:06:34.520Z"},{"duration":205,"start_time":"2023-01-21T05:07:37.446Z"},{"duration":259,"start_time":"2023-01-21T05:08:20.831Z"},{"duration":259,"start_time":"2023-01-21T05:09:09.756Z"},{"duration":50,"start_time":"2023-01-21T05:15:12.549Z"},{"duration":1590,"start_time":"2023-01-21T05:15:45.096Z"},{"duration":82,"start_time":"2023-01-21T05:15:46.689Z"},{"duration":33,"start_time":"2023-01-21T05:15:46.773Z"},{"duration":85,"start_time":"2023-01-21T05:15:52.286Z"},{"duration":5,"start_time":"2023-01-21T05:16:06.708Z"},{"duration":80,"start_time":"2023-01-21T05:16:06.715Z"},{"duration":18,"start_time":"2023-01-21T05:16:06.796Z"},{"duration":9,"start_time":"2023-01-21T05:16:06.816Z"},{"duration":0,"start_time":"2023-01-21T05:16:06.826Z"},{"duration":0,"start_time":"2023-01-21T05:16:06.827Z"},{"duration":0,"start_time":"2023-01-21T05:16:06.828Z"},{"duration":0,"start_time":"2023-01-21T05:16:06.829Z"},{"duration":0,"start_time":"2023-01-21T05:16:06.830Z"},{"duration":0,"start_time":"2023-01-21T05:16:06.831Z"},{"duration":0,"start_time":"2023-01-21T05:16:06.832Z"},{"duration":0,"start_time":"2023-01-21T05:16:06.833Z"},{"duration":0,"start_time":"2023-01-21T05:16:06.834Z"},{"duration":0,"start_time":"2023-01-21T05:16:06.835Z"},{"duration":0,"start_time":"2023-01-21T05:16:06.836Z"},{"duration":0,"start_time":"2023-01-21T05:16:06.837Z"},{"duration":0,"start_time":"2023-01-21T05:16:06.838Z"},{"duration":5,"start_time":"2023-01-21T05:16:33.508Z"},{"duration":70,"start_time":"2023-01-21T05:16:33.515Z"},{"duration":18,"start_time":"2023-01-21T05:16:33.586Z"},{"duration":9,"start_time":"2023-01-21T05:16:33.606Z"},{"duration":0,"start_time":"2023-01-21T05:16:33.617Z"},{"duration":0,"start_time":"2023-01-21T05:16:33.619Z"},{"duration":0,"start_time":"2023-01-21T05:16:33.620Z"},{"duration":0,"start_time":"2023-01-21T05:16:33.621Z"},{"duration":0,"start_time":"2023-01-21T05:16:33.622Z"},{"duration":0,"start_time":"2023-01-21T05:16:33.623Z"},{"duration":0,"start_time":"2023-01-21T05:16:33.624Z"},{"duration":0,"start_time":"2023-01-21T05:16:33.626Z"},{"duration":0,"start_time":"2023-01-21T05:16:33.627Z"},{"duration":0,"start_time":"2023-01-21T05:16:33.628Z"},{"duration":0,"start_time":"2023-01-21T05:16:33.629Z"},{"duration":0,"start_time":"2023-01-21T05:16:33.630Z"},{"duration":0,"start_time":"2023-01-21T05:16:33.631Z"},{"duration":7,"start_time":"2023-01-21T05:16:41.972Z"},{"duration":6,"start_time":"2023-01-21T05:16:56.051Z"},{"duration":71,"start_time":"2023-01-21T05:16:56.059Z"},{"duration":19,"start_time":"2023-01-21T05:16:56.132Z"},{"duration":9,"start_time":"2023-01-21T05:16:56.153Z"},{"duration":0,"start_time":"2023-01-21T05:16:56.164Z"},{"duration":0,"start_time":"2023-01-21T05:16:56.165Z"},{"duration":0,"start_time":"2023-01-21T05:16:56.166Z"},{"duration":0,"start_time":"2023-01-21T05:16:56.167Z"},{"duration":0,"start_time":"2023-01-21T05:16:56.168Z"},{"duration":0,"start_time":"2023-01-21T05:16:56.170Z"},{"duration":0,"start_time":"2023-01-21T05:16:56.170Z"},{"duration":0,"start_time":"2023-01-21T05:16:56.171Z"},{"duration":0,"start_time":"2023-01-21T05:16:56.172Z"},{"duration":0,"start_time":"2023-01-21T05:16:56.174Z"},{"duration":0,"start_time":"2023-01-21T05:16:56.175Z"},{"duration":0,"start_time":"2023-01-21T05:16:56.177Z"},{"duration":0,"start_time":"2023-01-21T05:16:56.178Z"},{"duration":18,"start_time":"2023-01-21T05:17:15.885Z"},{"duration":10,"start_time":"2023-01-21T05:17:57.543Z"},{"duration":6,"start_time":"2023-01-21T05:18:17.783Z"},{"duration":7,"start_time":"2023-01-21T05:18:21.197Z"},{"duration":5,"start_time":"2023-01-21T05:18:22.912Z"},{"duration":1618,"start_time":"2023-01-21T05:18:30.846Z"},{"duration":7496,"start_time":"2023-01-21T05:18:37.318Z"},{"duration":35797,"start_time":"2023-01-21T05:18:59.475Z"},{"duration":24,"start_time":"2023-01-21T05:19:35.275Z"},{"duration":239,"start_time":"2023-01-21T05:20:21.112Z"},{"duration":94,"start_time":"2023-01-21T05:20:24.363Z"},{"duration":198,"start_time":"2023-01-21T05:20:28.805Z"},{"duration":207,"start_time":"2023-01-21T05:20:37.292Z"},{"duration":10,"start_time":"2023-01-21T05:25:54.464Z"},{"duration":5,"start_time":"2023-01-21T05:26:30.791Z"},{"duration":11,"start_time":"2023-01-21T05:27:14.119Z"},{"duration":5,"start_time":"2023-01-21T05:28:33.397Z"},{"duration":74,"start_time":"2023-01-21T05:28:33.404Z"},{"duration":18,"start_time":"2023-01-21T05:28:33.479Z"},{"duration":9,"start_time":"2023-01-21T05:28:33.498Z"},{"duration":16,"start_time":"2023-01-21T05:28:33.508Z"},{"duration":12,"start_time":"2023-01-21T05:28:33.526Z"},{"duration":1651,"start_time":"2023-01-21T05:28:33.540Z"},{"duration":7428,"start_time":"2023-01-21T05:28:35.193Z"},{"duration":2459,"start_time":"2023-01-21T05:28:42.622Z"},{"duration":36469,"start_time":"2023-01-21T05:28:45.083Z"},{"duration":20,"start_time":"2023-01-21T05:29:21.554Z"},{"duration":375,"start_time":"2023-01-21T05:29:21.576Z"},{"duration":697,"start_time":"2023-01-21T05:29:21.954Z"},{"duration":310,"start_time":"2023-01-21T05:29:22.654Z"},{"duration":8,"start_time":"2023-01-21T05:29:22.966Z"},{"duration":9,"start_time":"2023-01-21T05:29:22.976Z"},{"duration":5,"start_time":"2023-01-21T05:29:22.986Z"},{"duration":12,"start_time":"2023-01-21T05:29:22.992Z"},{"duration":5,"start_time":"2023-01-21T05:29:23.006Z"},{"duration":49,"start_time":"2023-01-22T04:38:48.335Z"},{"duration":1558,"start_time":"2023-01-22T04:38:52.694Z"},{"duration":109,"start_time":"2023-01-22T04:38:54.254Z"},{"duration":22,"start_time":"2023-01-22T04:38:54.364Z"},{"duration":133,"start_time":"2023-01-22T04:38:54.388Z"},{"duration":6,"start_time":"2023-01-22T04:38:54.523Z"},{"duration":19,"start_time":"2023-01-22T04:38:54.531Z"},{"duration":7,"start_time":"2023-01-22T04:38:54.552Z"},{"duration":1795,"start_time":"2023-01-22T04:38:54.561Z"},{"duration":539,"start_time":"2023-01-22T04:38:56.358Z"},{"duration":7898,"start_time":"2023-01-22T04:38:56.899Z"},{"duration":2286,"start_time":"2023-01-22T04:39:04.798Z"},{"duration":4,"start_time":"2023-01-22T04:39:07.085Z"},{"duration":37483,"start_time":"2023-01-22T04:39:07.091Z"},{"duration":22,"start_time":"2023-01-22T04:39:44.576Z"},{"duration":158,"start_time":"2023-01-22T04:39:44.599Z"},{"duration":191,"start_time":"2023-01-22T04:39:44.760Z"},{"duration":98,"start_time":"2023-01-22T04:39:44.953Z"},{"duration":0,"start_time":"2023-01-22T04:39:45.052Z"},{"duration":0,"start_time":"2023-01-22T04:39:45.053Z"},{"duration":0,"start_time":"2023-01-22T04:39:45.055Z"},{"duration":0,"start_time":"2023-01-22T04:39:45.056Z"},{"duration":0,"start_time":"2023-01-22T04:39:45.057Z"},{"duration":0,"start_time":"2023-01-22T04:39:45.058Z"},{"duration":65,"start_time":"2023-01-22T04:41:06.243Z"},{"duration":355,"start_time":"2023-01-22T04:41:16.059Z"},{"duration":9,"start_time":"2023-01-22T04:41:28.735Z"},{"duration":5,"start_time":"2023-01-22T04:41:29.407Z"},{"duration":11,"start_time":"2023-01-22T04:41:30.061Z"},{"duration":12,"start_time":"2023-01-22T04:41:30.662Z"},{"duration":9,"start_time":"2023-01-22T04:41:41.107Z"},{"duration":51,"start_time":"2023-01-22T20:24:46.285Z"},{"duration":1703,"start_time":"2023-01-22T20:24:53.803Z"},{"duration":157,"start_time":"2023-01-22T20:24:55.508Z"},{"duration":36,"start_time":"2023-01-22T20:24:55.667Z"},{"duration":131,"start_time":"2023-01-22T20:24:55.705Z"},{"duration":8,"start_time":"2023-01-22T20:24:55.837Z"},{"duration":24,"start_time":"2023-01-22T20:24:55.847Z"},{"duration":34,"start_time":"2023-01-22T20:24:55.874Z"},{"duration":3013,"start_time":"2023-01-22T20:24:55.909Z"},{"duration":597,"start_time":"2023-01-22T20:24:58.925Z"},{"duration":8662,"start_time":"2023-01-22T20:24:59.526Z"},{"duration":2592,"start_time":"2023-01-22T20:25:08.190Z"},{"duration":5,"start_time":"2023-01-22T20:25:10.784Z"},{"duration":41909,"start_time":"2023-01-22T20:25:10.790Z"},{"duration":41,"start_time":"2023-01-22T20:25:52.701Z"},{"duration":399,"start_time":"2023-01-22T20:25:52.744Z"},{"duration":1496,"start_time":"2023-01-22T20:25:53.145Z"},{"duration":435,"start_time":"2023-01-22T20:25:54.643Z"},{"duration":10,"start_time":"2023-01-22T20:25:55.081Z"},{"duration":31,"start_time":"2023-01-22T20:25:55.093Z"},{"duration":49,"start_time":"2023-01-22T20:25:55.126Z"},{"duration":18,"start_time":"2023-01-22T20:25:55.177Z"},{"duration":24,"start_time":"2023-01-22T20:25:55.197Z"},{"duration":17,"start_time":"2023-01-22T20:26:05.478Z"},{"duration":6,"start_time":"2023-01-22T20:27:35.597Z"},{"duration":12,"start_time":"2023-01-22T20:48:58.457Z"},{"duration":139,"start_time":"2023-01-22T20:48:58.471Z"},{"duration":60,"start_time":"2023-01-22T20:48:58.613Z"},{"duration":17,"start_time":"2023-01-22T20:48:58.675Z"},{"duration":7,"start_time":"2023-01-22T20:48:58.695Z"},{"duration":215,"start_time":"2023-01-22T20:48:58.704Z"},{"duration":34,"start_time":"2023-01-22T20:48:58.922Z"},{"duration":9,"start_time":"2023-01-22T20:48:58.963Z"},{"duration":2234,"start_time":"2023-01-22T20:48:58.975Z"},{"duration":619,"start_time":"2023-01-22T20:49:01.210Z"},{"duration":10561,"start_time":"2023-01-22T20:49:01.830Z"},{"duration":2700,"start_time":"2023-01-22T20:49:12.393Z"},{"duration":5,"start_time":"2023-01-22T20:49:15.095Z"},{"duration":60066,"start_time":"2023-01-22T20:49:15.103Z"},{"duration":21,"start_time":"2023-01-22T20:50:15.171Z"},{"duration":956,"start_time":"2023-01-22T20:50:15.194Z"},{"duration":26,"start_time":"2023-01-22T20:50:16.152Z"},{"duration":672,"start_time":"2023-01-22T20:50:16.180Z"},{"duration":476,"start_time":"2023-01-22T20:50:16.869Z"},{"duration":530,"start_time":"2023-01-22T20:50:17.351Z"},{"duration":10,"start_time":"2023-01-22T20:50:17.882Z"},{"duration":11,"start_time":"2023-01-22T20:50:17.894Z"},{"duration":48,"start_time":"2023-01-22T20:50:17.907Z"},{"duration":28,"start_time":"2023-01-22T20:50:17.957Z"},{"duration":21,"start_time":"2023-01-22T20:50:17.987Z"},{"duration":18,"start_time":"2023-01-22T20:50:18.010Z"},{"duration":3112,"start_time":"2023-01-22T21:22:40.925Z"},{"duration":93,"start_time":"2023-01-22T21:22:44.040Z"},{"duration":35,"start_time":"2023-01-22T21:22:44.135Z"},{"duration":14,"start_time":"2023-01-22T21:22:44.172Z"},{"duration":13,"start_time":"2023-01-22T21:22:44.189Z"},{"duration":155,"start_time":"2023-01-22T21:22:44.203Z"},{"duration":9,"start_time":"2023-01-22T21:22:44.360Z"},{"duration":19,"start_time":"2023-01-22T21:22:44.371Z"},{"duration":1931,"start_time":"2023-01-22T21:22:44.392Z"},{"duration":498,"start_time":"2023-01-22T21:22:46.325Z"},{"duration":8317,"start_time":"2023-01-22T21:22:46.825Z"},{"duration":2520,"start_time":"2023-01-22T21:22:55.144Z"},{"duration":5,"start_time":"2023-01-22T21:22:57.666Z"},{"duration":68365,"start_time":"2023-01-22T21:22:57.674Z"},{"duration":23,"start_time":"2023-01-22T21:24:06.041Z"},{"duration":1049,"start_time":"2023-01-22T21:24:06.066Z"},{"duration":33,"start_time":"2023-01-22T21:24:07.117Z"},{"duration":291,"start_time":"2023-01-22T21:24:07.151Z"},{"duration":302,"start_time":"2023-01-22T21:24:07.445Z"},{"duration":469,"start_time":"2023-01-22T21:24:07.839Z"},{"duration":9,"start_time":"2023-01-22T21:24:08.310Z"},{"duration":23,"start_time":"2023-01-22T21:24:08.320Z"},{"duration":11,"start_time":"2023-01-22T21:24:08.346Z"},{"duration":9,"start_time":"2023-01-22T21:24:08.358Z"},{"duration":9,"start_time":"2023-01-22T21:24:08.368Z"},{"duration":5,"start_time":"2023-01-22T21:24:08.379Z"},{"duration":1661,"start_time":"2023-01-24T05:55:01.937Z"},{"duration":136,"start_time":"2023-01-24T05:55:03.600Z"},{"duration":34,"start_time":"2023-01-24T05:55:03.737Z"},{"duration":11,"start_time":"2023-01-24T05:55:03.773Z"},{"duration":7,"start_time":"2023-01-24T05:55:03.786Z"},{"duration":139,"start_time":"2023-01-24T05:55:03.795Z"},{"duration":403,"start_time":"2023-01-24T05:55:03.935Z"},{"duration":5217,"start_time":"2023-01-24T05:55:04.339Z"},{"duration":76,"start_time":"2023-01-24T05:55:09.558Z"},{"duration":0,"start_time":"2023-01-24T05:55:09.636Z"},{"duration":0,"start_time":"2023-01-24T05:55:09.638Z"},{"duration":0,"start_time":"2023-01-24T05:55:09.639Z"},{"duration":0,"start_time":"2023-01-24T05:55:09.640Z"},{"duration":0,"start_time":"2023-01-24T05:55:09.641Z"},{"duration":0,"start_time":"2023-01-24T05:55:09.642Z"},{"duration":0,"start_time":"2023-01-24T05:55:09.644Z"},{"duration":0,"start_time":"2023-01-24T05:55:09.645Z"},{"duration":0,"start_time":"2023-01-24T05:55:09.646Z"},{"duration":0,"start_time":"2023-01-24T05:55:09.647Z"},{"duration":0,"start_time":"2023-01-24T05:55:09.648Z"},{"duration":0,"start_time":"2023-01-24T05:55:09.649Z"},{"duration":0,"start_time":"2023-01-24T05:55:09.650Z"},{"duration":0,"start_time":"2023-01-24T05:55:09.651Z"},{"duration":0,"start_time":"2023-01-24T05:55:09.653Z"},{"duration":0,"start_time":"2023-01-24T05:55:09.654Z"},{"duration":0,"start_time":"2023-01-24T05:55:09.656Z"},{"duration":0,"start_time":"2023-01-24T05:55:09.657Z"},{"duration":0,"start_time":"2023-01-24T05:55:09.658Z"},{"duration":0,"start_time":"2023-01-24T05:55:09.659Z"},{"duration":0,"start_time":"2023-01-24T05:55:09.660Z"},{"duration":0,"start_time":"2023-01-24T05:55:09.661Z"},{"duration":7,"start_time":"2023-01-24T05:56:11.644Z"},{"duration":78,"start_time":"2023-01-24T05:56:11.653Z"},{"duration":30,"start_time":"2023-01-24T05:56:11.733Z"},{"duration":10,"start_time":"2023-01-24T05:56:11.765Z"},{"duration":7,"start_time":"2023-01-24T05:56:11.777Z"},{"duration":145,"start_time":"2023-01-24T05:56:11.785Z"},{"duration":368,"start_time":"2023-01-24T05:56:11.933Z"},{"duration":4856,"start_time":"2023-01-24T05:56:12.303Z"},{"duration":10,"start_time":"2023-01-24T05:56:17.161Z"},{"duration":6,"start_time":"2023-01-24T05:56:17.173Z"},{"duration":7,"start_time":"2023-01-24T05:56:17.183Z"},{"duration":950,"start_time":"2023-01-24T05:56:17.192Z"},{"duration":482,"start_time":"2023-01-24T05:56:18.144Z"},{"duration":7101,"start_time":"2023-01-24T05:56:18.628Z"},{"duration":1507,"start_time":"2023-01-24T05:56:25.731Z"},{"duration":4,"start_time":"2023-01-24T05:56:27.240Z"},{"duration":49251,"start_time":"2023-01-24T05:56:27.245Z"},{"duration":24,"start_time":"2023-01-24T05:57:16.497Z"},{"duration":898,"start_time":"2023-01-24T05:57:16.523Z"},{"duration":20,"start_time":"2023-01-24T05:57:17.422Z"},{"duration":378,"start_time":"2023-01-24T05:57:17.443Z"},{"duration":298,"start_time":"2023-01-24T05:57:17.824Z"},{"duration":429,"start_time":"2023-01-24T05:57:18.127Z"},{"duration":163,"start_time":"2023-01-24T05:57:18.558Z"},{"duration":9,"start_time":"2023-01-24T05:57:18.723Z"},{"duration":8,"start_time":"2023-01-24T05:57:18.734Z"},{"duration":8,"start_time":"2023-01-24T05:57:18.744Z"},{"duration":8,"start_time":"2023-01-24T05:57:18.754Z"},{"duration":8,"start_time":"2023-01-24T05:57:18.766Z"},{"duration":48,"start_time":"2023-01-24T05:57:18.776Z"},{"duration":934,"start_time":"2023-01-24T05:58:04.047Z"},{"duration":9,"start_time":"2023-01-24T06:04:04.141Z"},{"duration":89,"start_time":"2023-01-24T06:04:04.152Z"},{"duration":37,"start_time":"2023-01-24T06:04:04.244Z"},{"duration":12,"start_time":"2023-01-24T06:04:04.283Z"},{"duration":31,"start_time":"2023-01-24T06:04:04.298Z"},{"duration":164,"start_time":"2023-01-24T06:04:04.331Z"},{"duration":405,"start_time":"2023-01-24T06:04:04.497Z"},{"duration":5081,"start_time":"2023-01-24T06:04:04.904Z"},{"duration":12,"start_time":"2023-01-24T06:04:09.987Z"},{"duration":7,"start_time":"2023-01-24T06:04:10.020Z"},{"duration":7,"start_time":"2023-01-24T06:04:10.030Z"},{"duration":1018,"start_time":"2023-01-24T06:04:10.039Z"},{"duration":509,"start_time":"2023-01-24T06:04:11.059Z"},{"duration":7782,"start_time":"2023-01-24T06:04:11.570Z"},{"duration":1829,"start_time":"2023-01-24T06:04:19.354Z"},{"duration":4,"start_time":"2023-01-24T06:04:21.185Z"},{"duration":54993,"start_time":"2023-01-24T06:04:21.191Z"},{"duration":20,"start_time":"2023-01-24T06:05:16.186Z"},{"duration":583,"start_time":"2023-01-24T06:05:16.222Z"},{"duration":26,"start_time":"2023-01-24T06:05:16.807Z"},{"duration":191,"start_time":"2023-01-24T06:05:16.836Z"},{"duration":192,"start_time":"2023-01-24T06:05:17.029Z"},{"duration":421,"start_time":"2023-01-24T06:05:17.224Z"},{"duration":168,"start_time":"2023-01-24T06:05:17.647Z"},{"duration":13,"start_time":"2023-01-24T06:05:17.816Z"},{"duration":19,"start_time":"2023-01-24T06:05:17.831Z"},{"duration":9,"start_time":"2023-01-24T06:05:17.852Z"},{"duration":9,"start_time":"2023-01-24T06:05:17.863Z"},{"duration":9,"start_time":"2023-01-24T06:05:17.876Z"},{"duration":19,"start_time":"2023-01-24T06:05:17.922Z"},{"duration":89,"start_time":"2023-01-24T06:14:30.197Z"},{"duration":9,"start_time":"2023-01-24T06:14:44.335Z"},{"duration":125,"start_time":"2023-01-24T06:14:44.346Z"},{"duration":41,"start_time":"2023-01-24T06:14:44.473Z"},{"duration":14,"start_time":"2023-01-24T06:14:44.516Z"},{"duration":29,"start_time":"2023-01-24T06:14:44.533Z"},{"duration":142,"start_time":"2023-01-24T06:14:44.565Z"},{"duration":432,"start_time":"2023-01-24T06:14:44.709Z"},{"duration":5125,"start_time":"2023-01-24T06:14:45.144Z"},{"duration":11,"start_time":"2023-01-24T06:14:50.270Z"},{"duration":16,"start_time":"2023-01-24T06:14:50.283Z"},{"duration":21,"start_time":"2023-01-24T06:14:50.301Z"},{"duration":1070,"start_time":"2023-01-24T06:14:50.324Z"},{"duration":516,"start_time":"2023-01-24T06:14:51.396Z"},{"duration":7555,"start_time":"2023-01-24T06:14:51.915Z"},{"duration":1617,"start_time":"2023-01-24T06:14:59.472Z"},{"duration":5,"start_time":"2023-01-24T06:15:01.090Z"},{"duration":53667,"start_time":"2023-01-24T06:15:01.097Z"},{"duration":16,"start_time":"2023-01-24T06:15:54.766Z"},{"duration":1035,"start_time":"2023-01-24T06:15:54.783Z"},{"duration":22,"start_time":"2023-01-24T06:15:55.820Z"},{"duration":477,"start_time":"2023-01-24T06:15:55.844Z"},{"duration":198,"start_time":"2023-01-24T06:15:56.323Z"},{"duration":433,"start_time":"2023-01-24T06:15:56.529Z"},{"duration":177,"start_time":"2023-01-24T06:15:56.964Z"},{"duration":9,"start_time":"2023-01-24T06:15:57.143Z"},{"duration":9,"start_time":"2023-01-24T06:15:57.154Z"},{"duration":9,"start_time":"2023-01-24T06:15:57.164Z"},{"duration":9,"start_time":"2023-01-24T06:15:57.174Z"},{"duration":43,"start_time":"2023-01-24T06:15:57.184Z"},{"duration":8,"start_time":"2023-01-24T06:15:57.230Z"}],"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.5"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":true,"title_cell":"Table of Contents","title_sidebar":"Построение моделей ML для подбора тарифов мобильной связи.","toc_cell":false,"toc_position":{},"toc_section_display":true,"toc_window_display":true},"colab":{"provenance":[]}},"nbformat":4,"nbformat_minor":0}